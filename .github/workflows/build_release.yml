name: Release

on:
  release:
    types:
      - created

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: install packages (linux)
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build libsdl2-dev
      if: matrix.os == 'ubuntu-latest'

    - name: install packages (macos)
      run: brew install ninja SDL2
      if: matrix.os == 'macos-latest'

    - name: mkdir bin
      run: mkdir -p bin
      if: matrix.os == 'windows-latest'

    - name: download sdl2 (windows)
      uses: albin-johansson/download-sdl2@v1
      with:
        version: 2.0.14
        sources_destination: .
        binaries_destination: bin
      if: matrix.os == 'windows-latest'

    - name: mkdir out
      run: mkdir -p out

    - name: cmake (linux + macos)
      run: cmake -S . -B out -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out/install
      if: matrix.os != 'windows-latest'

    - name: cmake (windows)
      run: cmake -S . -B out -DCMAKE_BUILD_TYPE=Release "-DSDL2_ROOT_DIR=SDL2-2.0.14" -DCMAKE_INSTALL_PREFIX=out/install
      if: matrix.os == 'windows-latest'

    - name: build
      run: cmake --build out --config Release --target install

    - name: strip
      run: find out/install/ -type f -perm -u=x -exec strip -x {} +
      if: matrix.os != 'windows-latest'

    - name: archive
      id: archive
      run: |
        OSNAME=$(echo ${{ matrix.os }} | sed 's/-latest//')
        VERSION=${{ github.event.release.tag_name }}
        PKGNAME="binjgb-$OSNAME"
        TARBALL=$PKGNAME.tar.gz
        mv out/install binjgb-$VERSION
        tar -czf $TARBALL binjgb-$VERSION
        echo "::set-output name=tarball::$TARBALL"

    - name: upload tarball
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ steps.archive.outputs.tarball }}
        asset_name: ${{ steps.archive.outputs.tarball }}
        asset_content_type: application/gzip

